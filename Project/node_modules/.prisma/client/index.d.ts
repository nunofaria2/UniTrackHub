
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model turmas
 * 
 */
export type turmas = $Result.DefaultSelection<Prisma.$turmasPayload>
/**
 * Model horarios
 * 
 */
export type horarios = $Result.DefaultSelection<Prisma.$horariosPayload>
/**
 * Model utilizadores
 * 
 */
export type utilizadores = $Result.DefaultSelection<Prisma.$utilizadoresPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Turmas
 * const turmas = await prisma.turmas.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Turmas
   * const turmas = await prisma.turmas.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.turmas`: Exposes CRUD operations for the **turmas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turmas
    * const turmas = await prisma.turmas.findMany()
    * ```
    */
  get turmas(): Prisma.turmasDelegate<ExtArgs>;

  /**
   * `prisma.horarios`: Exposes CRUD operations for the **horarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Horarios
    * const horarios = await prisma.horarios.findMany()
    * ```
    */
  get horarios(): Prisma.horariosDelegate<ExtArgs>;

  /**
   * `prisma.utilizadores`: Exposes CRUD operations for the **utilizadores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Utilizadores
    * const utilizadores = await prisma.utilizadores.findMany()
    * ```
    */
  get utilizadores(): Prisma.utilizadoresDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    turmas: 'turmas',
    horarios: 'horarios',
    utilizadores: 'utilizadores'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'turmas' | 'horarios' | 'utilizadores'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      turmas: {
        payload: Prisma.$turmasPayload<ExtArgs>
        fields: Prisma.turmasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.turmasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$turmasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.turmasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$turmasPayload>
          }
          findFirst: {
            args: Prisma.turmasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$turmasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.turmasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$turmasPayload>
          }
          findMany: {
            args: Prisma.turmasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$turmasPayload>[]
          }
          create: {
            args: Prisma.turmasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$turmasPayload>
          }
          createMany: {
            args: Prisma.turmasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.turmasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$turmasPayload>
          }
          update: {
            args: Prisma.turmasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$turmasPayload>
          }
          deleteMany: {
            args: Prisma.turmasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.turmasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.turmasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$turmasPayload>
          }
          aggregate: {
            args: Prisma.TurmasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTurmas>
          }
          groupBy: {
            args: Prisma.turmasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TurmasGroupByOutputType>[]
          }
          count: {
            args: Prisma.turmasCountArgs<ExtArgs>,
            result: $Utils.Optional<TurmasCountAggregateOutputType> | number
          }
        }
      }
      horarios: {
        payload: Prisma.$horariosPayload<ExtArgs>
        fields: Prisma.horariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.horariosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$horariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.horariosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$horariosPayload>
          }
          findFirst: {
            args: Prisma.horariosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$horariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.horariosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$horariosPayload>
          }
          findMany: {
            args: Prisma.horariosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$horariosPayload>[]
          }
          create: {
            args: Prisma.horariosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$horariosPayload>
          }
          createMany: {
            args: Prisma.horariosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.horariosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$horariosPayload>
          }
          update: {
            args: Prisma.horariosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$horariosPayload>
          }
          deleteMany: {
            args: Prisma.horariosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.horariosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.horariosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$horariosPayload>
          }
          aggregate: {
            args: Prisma.HorariosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHorarios>
          }
          groupBy: {
            args: Prisma.horariosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HorariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.horariosCountArgs<ExtArgs>,
            result: $Utils.Optional<HorariosCountAggregateOutputType> | number
          }
        }
      }
      utilizadores: {
        payload: Prisma.$utilizadoresPayload<ExtArgs>
        fields: Prisma.utilizadoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.utilizadoresFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilizadoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.utilizadoresFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilizadoresPayload>
          }
          findFirst: {
            args: Prisma.utilizadoresFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilizadoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.utilizadoresFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilizadoresPayload>
          }
          findMany: {
            args: Prisma.utilizadoresFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilizadoresPayload>[]
          }
          create: {
            args: Prisma.utilizadoresCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilizadoresPayload>
          }
          createMany: {
            args: Prisma.utilizadoresCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.utilizadoresDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilizadoresPayload>
          }
          update: {
            args: Prisma.utilizadoresUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilizadoresPayload>
          }
          deleteMany: {
            args: Prisma.utilizadoresDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.utilizadoresUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.utilizadoresUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$utilizadoresPayload>
          }
          aggregate: {
            args: Prisma.UtilizadoresAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUtilizadores>
          }
          groupBy: {
            args: Prisma.utilizadoresGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UtilizadoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.utilizadoresCountArgs<ExtArgs>,
            result: $Utils.Optional<UtilizadoresCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TurmasCountOutputType
   */

  export type TurmasCountOutputType = {
    horarios: number
    utilizadores: number
  }

  export type TurmasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    horarios?: boolean | TurmasCountOutputTypeCountHorariosArgs
    utilizadores?: boolean | TurmasCountOutputTypeCountUtilizadoresArgs
  }

  // Custom InputTypes
  /**
   * TurmasCountOutputType without action
   */
  export type TurmasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurmasCountOutputType
     */
    select?: TurmasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TurmasCountOutputType without action
   */
  export type TurmasCountOutputTypeCountHorariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: horariosWhereInput
  }

  /**
   * TurmasCountOutputType without action
   */
  export type TurmasCountOutputTypeCountUtilizadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: utilizadoresWhereInput
  }


  /**
   * Models
   */

  /**
   * Model turmas
   */

  export type AggregateTurmas = {
    _count: TurmasCountAggregateOutputType | null
    _avg: TurmasAvgAggregateOutputType | null
    _sum: TurmasSumAggregateOutputType | null
    _min: TurmasMinAggregateOutputType | null
    _max: TurmasMaxAggregateOutputType | null
  }

  export type TurmasAvgAggregateOutputType = {
    id_turma: number | null
  }

  export type TurmasSumAggregateOutputType = {
    id_turma: number | null
  }

  export type TurmasMinAggregateOutputType = {
    id_turma: number | null
    NomeTurma: string | null
    Descricao: string | null
  }

  export type TurmasMaxAggregateOutputType = {
    id_turma: number | null
    NomeTurma: string | null
    Descricao: string | null
  }

  export type TurmasCountAggregateOutputType = {
    id_turma: number
    NomeTurma: number
    Descricao: number
    _all: number
  }


  export type TurmasAvgAggregateInputType = {
    id_turma?: true
  }

  export type TurmasSumAggregateInputType = {
    id_turma?: true
  }

  export type TurmasMinAggregateInputType = {
    id_turma?: true
    NomeTurma?: true
    Descricao?: true
  }

  export type TurmasMaxAggregateInputType = {
    id_turma?: true
    NomeTurma?: true
    Descricao?: true
  }

  export type TurmasCountAggregateInputType = {
    id_turma?: true
    NomeTurma?: true
    Descricao?: true
    _all?: true
  }

  export type TurmasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which turmas to aggregate.
     */
    where?: turmasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: turmasOrderByWithRelationInput | turmasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: turmasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned turmas
    **/
    _count?: true | TurmasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurmasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurmasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurmasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurmasMaxAggregateInputType
  }

  export type GetTurmasAggregateType<T extends TurmasAggregateArgs> = {
        [P in keyof T & keyof AggregateTurmas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurmas[P]>
      : GetScalarType<T[P], AggregateTurmas[P]>
  }




  export type turmasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: turmasWhereInput
    orderBy?: turmasOrderByWithAggregationInput | turmasOrderByWithAggregationInput[]
    by: TurmasScalarFieldEnum[] | TurmasScalarFieldEnum
    having?: turmasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurmasCountAggregateInputType | true
    _avg?: TurmasAvgAggregateInputType
    _sum?: TurmasSumAggregateInputType
    _min?: TurmasMinAggregateInputType
    _max?: TurmasMaxAggregateInputType
  }

  export type TurmasGroupByOutputType = {
    id_turma: number
    NomeTurma: string
    Descricao: string | null
    _count: TurmasCountAggregateOutputType | null
    _avg: TurmasAvgAggregateOutputType | null
    _sum: TurmasSumAggregateOutputType | null
    _min: TurmasMinAggregateOutputType | null
    _max: TurmasMaxAggregateOutputType | null
  }

  type GetTurmasGroupByPayload<T extends turmasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurmasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurmasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurmasGroupByOutputType[P]>
            : GetScalarType<T[P], TurmasGroupByOutputType[P]>
        }
      >
    >


  export type turmasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_turma?: boolean
    NomeTurma?: boolean
    Descricao?: boolean
    horarios?: boolean | turmas$horariosArgs<ExtArgs>
    utilizadores?: boolean | turmas$utilizadoresArgs<ExtArgs>
    _count?: boolean | TurmasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turmas"]>

  export type turmasSelectScalar = {
    id_turma?: boolean
    NomeTurma?: boolean
    Descricao?: boolean
  }


  export type turmasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    horarios?: boolean | turmas$horariosArgs<ExtArgs>
    utilizadores?: boolean | turmas$utilizadoresArgs<ExtArgs>
    _count?: boolean | TurmasCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $turmasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "turmas"
    objects: {
      horarios: Prisma.$horariosPayload<ExtArgs>[]
      utilizadores: Prisma.$utilizadoresPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_turma: number
      NomeTurma: string
      Descricao: string | null
    }, ExtArgs["result"]["turmas"]>
    composites: {}
  }


  type turmasGetPayload<S extends boolean | null | undefined | turmasDefaultArgs> = $Result.GetResult<Prisma.$turmasPayload, S>

  type turmasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<turmasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TurmasCountAggregateInputType | true
    }

  export interface turmasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['turmas'], meta: { name: 'turmas' } }
    /**
     * Find zero or one Turmas that matches the filter.
     * @param {turmasFindUniqueArgs} args - Arguments to find a Turmas
     * @example
     * // Get one Turmas
     * const turmas = await prisma.turmas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends turmasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, turmasFindUniqueArgs<ExtArgs>>
    ): Prisma__turmasClient<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Turmas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {turmasFindUniqueOrThrowArgs} args - Arguments to find a Turmas
     * @example
     * // Get one Turmas
     * const turmas = await prisma.turmas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends turmasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, turmasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__turmasClient<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Turmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasFindFirstArgs} args - Arguments to find a Turmas
     * @example
     * // Get one Turmas
     * const turmas = await prisma.turmas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends turmasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, turmasFindFirstArgs<ExtArgs>>
    ): Prisma__turmasClient<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Turmas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasFindFirstOrThrowArgs} args - Arguments to find a Turmas
     * @example
     * // Get one Turmas
     * const turmas = await prisma.turmas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends turmasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, turmasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__turmasClient<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Turmas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turmas
     * const turmas = await prisma.turmas.findMany()
     * 
     * // Get first 10 Turmas
     * const turmas = await prisma.turmas.findMany({ take: 10 })
     * 
     * // Only select the `id_turma`
     * const turmasWithId_turmaOnly = await prisma.turmas.findMany({ select: { id_turma: true } })
     * 
    **/
    findMany<T extends turmasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, turmasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Turmas.
     * @param {turmasCreateArgs} args - Arguments to create a Turmas.
     * @example
     * // Create one Turmas
     * const Turmas = await prisma.turmas.create({
     *   data: {
     *     // ... data to create a Turmas
     *   }
     * })
     * 
    **/
    create<T extends turmasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, turmasCreateArgs<ExtArgs>>
    ): Prisma__turmasClient<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Turmas.
     * @param {turmasCreateManyArgs} args - Arguments to create many Turmas.
     * @example
     * // Create many Turmas
     * const turmas = await prisma.turmas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends turmasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, turmasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Turmas.
     * @param {turmasDeleteArgs} args - Arguments to delete one Turmas.
     * @example
     * // Delete one Turmas
     * const Turmas = await prisma.turmas.delete({
     *   where: {
     *     // ... filter to delete one Turmas
     *   }
     * })
     * 
    **/
    delete<T extends turmasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, turmasDeleteArgs<ExtArgs>>
    ): Prisma__turmasClient<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Turmas.
     * @param {turmasUpdateArgs} args - Arguments to update one Turmas.
     * @example
     * // Update one Turmas
     * const turmas = await prisma.turmas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends turmasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, turmasUpdateArgs<ExtArgs>>
    ): Prisma__turmasClient<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Turmas.
     * @param {turmasDeleteManyArgs} args - Arguments to filter Turmas to delete.
     * @example
     * // Delete a few Turmas
     * const { count } = await prisma.turmas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends turmasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, turmasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turmas
     * const turmas = await prisma.turmas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends turmasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, turmasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Turmas.
     * @param {turmasUpsertArgs} args - Arguments to update or create a Turmas.
     * @example
     * // Update or create a Turmas
     * const turmas = await prisma.turmas.upsert({
     *   create: {
     *     // ... data to create a Turmas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turmas we want to update
     *   }
     * })
    **/
    upsert<T extends turmasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, turmasUpsertArgs<ExtArgs>>
    ): Prisma__turmasClient<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasCountArgs} args - Arguments to filter Turmas to count.
     * @example
     * // Count the number of Turmas
     * const count = await prisma.turmas.count({
     *   where: {
     *     // ... the filter for the Turmas we want to count
     *   }
     * })
    **/
    count<T extends turmasCountArgs>(
      args?: Subset<T, turmasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurmasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurmasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurmasAggregateArgs>(args: Subset<T, TurmasAggregateArgs>): Prisma.PrismaPromise<GetTurmasAggregateType<T>>

    /**
     * Group by Turmas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {turmasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends turmasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: turmasGroupByArgs['orderBy'] }
        : { orderBy?: turmasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, turmasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurmasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the turmas model
   */
  readonly fields: turmasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for turmas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__turmasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    horarios<T extends turmas$horariosArgs<ExtArgs> = {}>(args?: Subset<T, turmas$horariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$horariosPayload<ExtArgs>, T, 'findMany'> | Null>;

    utilizadores<T extends turmas$utilizadoresArgs<ExtArgs> = {}>(args?: Subset<T, turmas$utilizadoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$utilizadoresPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the turmas model
   */ 
  interface turmasFieldRefs {
    readonly id_turma: FieldRef<"turmas", 'Int'>
    readonly NomeTurma: FieldRef<"turmas", 'String'>
    readonly Descricao: FieldRef<"turmas", 'String'>
  }
    

  // Custom InputTypes
  /**
   * turmas findUnique
   */
  export type turmasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
    /**
     * Filter, which turmas to fetch.
     */
    where: turmasWhereUniqueInput
  }

  /**
   * turmas findUniqueOrThrow
   */
  export type turmasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
    /**
     * Filter, which turmas to fetch.
     */
    where: turmasWhereUniqueInput
  }

  /**
   * turmas findFirst
   */
  export type turmasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
    /**
     * Filter, which turmas to fetch.
     */
    where?: turmasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: turmasOrderByWithRelationInput | turmasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for turmas.
     */
    cursor?: turmasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of turmas.
     */
    distinct?: TurmasScalarFieldEnum | TurmasScalarFieldEnum[]
  }

  /**
   * turmas findFirstOrThrow
   */
  export type turmasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
    /**
     * Filter, which turmas to fetch.
     */
    where?: turmasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: turmasOrderByWithRelationInput | turmasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for turmas.
     */
    cursor?: turmasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of turmas.
     */
    distinct?: TurmasScalarFieldEnum | TurmasScalarFieldEnum[]
  }

  /**
   * turmas findMany
   */
  export type turmasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
    /**
     * Filter, which turmas to fetch.
     */
    where?: turmasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of turmas to fetch.
     */
    orderBy?: turmasOrderByWithRelationInput | turmasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing turmas.
     */
    cursor?: turmasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` turmas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` turmas.
     */
    skip?: number
    distinct?: TurmasScalarFieldEnum | TurmasScalarFieldEnum[]
  }

  /**
   * turmas create
   */
  export type turmasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
    /**
     * The data needed to create a turmas.
     */
    data: XOR<turmasCreateInput, turmasUncheckedCreateInput>
  }

  /**
   * turmas createMany
   */
  export type turmasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many turmas.
     */
    data: turmasCreateManyInput | turmasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * turmas update
   */
  export type turmasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
    /**
     * The data needed to update a turmas.
     */
    data: XOR<turmasUpdateInput, turmasUncheckedUpdateInput>
    /**
     * Choose, which turmas to update.
     */
    where: turmasWhereUniqueInput
  }

  /**
   * turmas updateMany
   */
  export type turmasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update turmas.
     */
    data: XOR<turmasUpdateManyMutationInput, turmasUncheckedUpdateManyInput>
    /**
     * Filter which turmas to update
     */
    where?: turmasWhereInput
  }

  /**
   * turmas upsert
   */
  export type turmasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
    /**
     * The filter to search for the turmas to update in case it exists.
     */
    where: turmasWhereUniqueInput
    /**
     * In case the turmas found by the `where` argument doesn't exist, create a new turmas with this data.
     */
    create: XOR<turmasCreateInput, turmasUncheckedCreateInput>
    /**
     * In case the turmas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<turmasUpdateInput, turmasUncheckedUpdateInput>
  }

  /**
   * turmas delete
   */
  export type turmasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
    /**
     * Filter which turmas to delete.
     */
    where: turmasWhereUniqueInput
  }

  /**
   * turmas deleteMany
   */
  export type turmasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which turmas to delete
     */
    where?: turmasWhereInput
  }

  /**
   * turmas.horarios
   */
  export type turmas$horariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
    where?: horariosWhereInput
    orderBy?: horariosOrderByWithRelationInput | horariosOrderByWithRelationInput[]
    cursor?: horariosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HorariosScalarFieldEnum | HorariosScalarFieldEnum[]
  }

  /**
   * turmas.utilizadores
   */
  export type turmas$utilizadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
    where?: utilizadoresWhereInput
    orderBy?: utilizadoresOrderByWithRelationInput | utilizadoresOrderByWithRelationInput[]
    cursor?: utilizadoresWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UtilizadoresScalarFieldEnum | UtilizadoresScalarFieldEnum[]
  }

  /**
   * turmas without action
   */
  export type turmasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
  }


  /**
   * Model horarios
   */

  export type AggregateHorarios = {
    _count: HorariosCountAggregateOutputType | null
    _avg: HorariosAvgAggregateOutputType | null
    _sum: HorariosSumAggregateOutputType | null
    _min: HorariosMinAggregateOutputType | null
    _max: HorariosMaxAggregateOutputType | null
  }

  export type HorariosAvgAggregateOutputType = {
    id_horario: number | null
    id_turma: number | null
  }

  export type HorariosSumAggregateOutputType = {
    id_horario: number | null
    id_turma: number | null
  }

  export type HorariosMinAggregateOutputType = {
    id_horario: number | null
    Data_inicio: Date | null
    Data_fim: Date | null
    id_turma: number | null
    Disciplina: string | null
  }

  export type HorariosMaxAggregateOutputType = {
    id_horario: number | null
    Data_inicio: Date | null
    Data_fim: Date | null
    id_turma: number | null
    Disciplina: string | null
  }

  export type HorariosCountAggregateOutputType = {
    id_horario: number
    Data_inicio: number
    Data_fim: number
    id_turma: number
    Disciplina: number
    _all: number
  }


  export type HorariosAvgAggregateInputType = {
    id_horario?: true
    id_turma?: true
  }

  export type HorariosSumAggregateInputType = {
    id_horario?: true
    id_turma?: true
  }

  export type HorariosMinAggregateInputType = {
    id_horario?: true
    Data_inicio?: true
    Data_fim?: true
    id_turma?: true
    Disciplina?: true
  }

  export type HorariosMaxAggregateInputType = {
    id_horario?: true
    Data_inicio?: true
    Data_fim?: true
    id_turma?: true
    Disciplina?: true
  }

  export type HorariosCountAggregateInputType = {
    id_horario?: true
    Data_inicio?: true
    Data_fim?: true
    id_turma?: true
    Disciplina?: true
    _all?: true
  }

  export type HorariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which horarios to aggregate.
     */
    where?: horariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of horarios to fetch.
     */
    orderBy?: horariosOrderByWithRelationInput | horariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: horariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` horarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` horarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned horarios
    **/
    _count?: true | HorariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HorariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HorariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HorariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HorariosMaxAggregateInputType
  }

  export type GetHorariosAggregateType<T extends HorariosAggregateArgs> = {
        [P in keyof T & keyof AggregateHorarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHorarios[P]>
      : GetScalarType<T[P], AggregateHorarios[P]>
  }




  export type horariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: horariosWhereInput
    orderBy?: horariosOrderByWithAggregationInput | horariosOrderByWithAggregationInput[]
    by: HorariosScalarFieldEnum[] | HorariosScalarFieldEnum
    having?: horariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HorariosCountAggregateInputType | true
    _avg?: HorariosAvgAggregateInputType
    _sum?: HorariosSumAggregateInputType
    _min?: HorariosMinAggregateInputType
    _max?: HorariosMaxAggregateInputType
  }

  export type HorariosGroupByOutputType = {
    id_horario: number
    Data_inicio: Date | null
    Data_fim: Date | null
    id_turma: number
    Disciplina: string
    _count: HorariosCountAggregateOutputType | null
    _avg: HorariosAvgAggregateOutputType | null
    _sum: HorariosSumAggregateOutputType | null
    _min: HorariosMinAggregateOutputType | null
    _max: HorariosMaxAggregateOutputType | null
  }

  type GetHorariosGroupByPayload<T extends horariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HorariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HorariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HorariosGroupByOutputType[P]>
            : GetScalarType<T[P], HorariosGroupByOutputType[P]>
        }
      >
    >


  export type horariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_horario?: boolean
    Data_inicio?: boolean
    Data_fim?: boolean
    id_turma?: boolean
    Disciplina?: boolean
    turma?: boolean | turmasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["horarios"]>

  export type horariosSelectScalar = {
    id_horario?: boolean
    Data_inicio?: boolean
    Data_fim?: boolean
    id_turma?: boolean
    Disciplina?: boolean
  }


  export type horariosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turma?: boolean | turmasDefaultArgs<ExtArgs>
  }


  export type $horariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "horarios"
    objects: {
      turma: Prisma.$turmasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_horario: number
      Data_inicio: Date | null
      Data_fim: Date | null
      id_turma: number
      Disciplina: string
    }, ExtArgs["result"]["horarios"]>
    composites: {}
  }


  type horariosGetPayload<S extends boolean | null | undefined | horariosDefaultArgs> = $Result.GetResult<Prisma.$horariosPayload, S>

  type horariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<horariosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HorariosCountAggregateInputType | true
    }

  export interface horariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['horarios'], meta: { name: 'horarios' } }
    /**
     * Find zero or one Horarios that matches the filter.
     * @param {horariosFindUniqueArgs} args - Arguments to find a Horarios
     * @example
     * // Get one Horarios
     * const horarios = await prisma.horarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends horariosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, horariosFindUniqueArgs<ExtArgs>>
    ): Prisma__horariosClient<$Result.GetResult<Prisma.$horariosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Horarios that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {horariosFindUniqueOrThrowArgs} args - Arguments to find a Horarios
     * @example
     * // Get one Horarios
     * const horarios = await prisma.horarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends horariosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, horariosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__horariosClient<$Result.GetResult<Prisma.$horariosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Horarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {horariosFindFirstArgs} args - Arguments to find a Horarios
     * @example
     * // Get one Horarios
     * const horarios = await prisma.horarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends horariosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, horariosFindFirstArgs<ExtArgs>>
    ): Prisma__horariosClient<$Result.GetResult<Prisma.$horariosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Horarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {horariosFindFirstOrThrowArgs} args - Arguments to find a Horarios
     * @example
     * // Get one Horarios
     * const horarios = await prisma.horarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends horariosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, horariosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__horariosClient<$Result.GetResult<Prisma.$horariosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Horarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {horariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Horarios
     * const horarios = await prisma.horarios.findMany()
     * 
     * // Get first 10 Horarios
     * const horarios = await prisma.horarios.findMany({ take: 10 })
     * 
     * // Only select the `id_horario`
     * const horariosWithId_horarioOnly = await prisma.horarios.findMany({ select: { id_horario: true } })
     * 
    **/
    findMany<T extends horariosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, horariosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$horariosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Horarios.
     * @param {horariosCreateArgs} args - Arguments to create a Horarios.
     * @example
     * // Create one Horarios
     * const Horarios = await prisma.horarios.create({
     *   data: {
     *     // ... data to create a Horarios
     *   }
     * })
     * 
    **/
    create<T extends horariosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, horariosCreateArgs<ExtArgs>>
    ): Prisma__horariosClient<$Result.GetResult<Prisma.$horariosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Horarios.
     * @param {horariosCreateManyArgs} args - Arguments to create many Horarios.
     * @example
     * // Create many Horarios
     * const horarios = await prisma.horarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends horariosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, horariosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Horarios.
     * @param {horariosDeleteArgs} args - Arguments to delete one Horarios.
     * @example
     * // Delete one Horarios
     * const Horarios = await prisma.horarios.delete({
     *   where: {
     *     // ... filter to delete one Horarios
     *   }
     * })
     * 
    **/
    delete<T extends horariosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, horariosDeleteArgs<ExtArgs>>
    ): Prisma__horariosClient<$Result.GetResult<Prisma.$horariosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Horarios.
     * @param {horariosUpdateArgs} args - Arguments to update one Horarios.
     * @example
     * // Update one Horarios
     * const horarios = await prisma.horarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends horariosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, horariosUpdateArgs<ExtArgs>>
    ): Prisma__horariosClient<$Result.GetResult<Prisma.$horariosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Horarios.
     * @param {horariosDeleteManyArgs} args - Arguments to filter Horarios to delete.
     * @example
     * // Delete a few Horarios
     * const { count } = await prisma.horarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends horariosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, horariosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Horarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {horariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Horarios
     * const horarios = await prisma.horarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends horariosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, horariosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Horarios.
     * @param {horariosUpsertArgs} args - Arguments to update or create a Horarios.
     * @example
     * // Update or create a Horarios
     * const horarios = await prisma.horarios.upsert({
     *   create: {
     *     // ... data to create a Horarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Horarios we want to update
     *   }
     * })
    **/
    upsert<T extends horariosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, horariosUpsertArgs<ExtArgs>>
    ): Prisma__horariosClient<$Result.GetResult<Prisma.$horariosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Horarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {horariosCountArgs} args - Arguments to filter Horarios to count.
     * @example
     * // Count the number of Horarios
     * const count = await prisma.horarios.count({
     *   where: {
     *     // ... the filter for the Horarios we want to count
     *   }
     * })
    **/
    count<T extends horariosCountArgs>(
      args?: Subset<T, horariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HorariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Horarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HorariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HorariosAggregateArgs>(args: Subset<T, HorariosAggregateArgs>): Prisma.PrismaPromise<GetHorariosAggregateType<T>>

    /**
     * Group by Horarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {horariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends horariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: horariosGroupByArgs['orderBy'] }
        : { orderBy?: horariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, horariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHorariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the horarios model
   */
  readonly fields: horariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for horarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__horariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    turma<T extends turmasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, turmasDefaultArgs<ExtArgs>>): Prisma__turmasClient<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the horarios model
   */ 
  interface horariosFieldRefs {
    readonly id_horario: FieldRef<"horarios", 'Int'>
    readonly Data_inicio: FieldRef<"horarios", 'DateTime'>
    readonly Data_fim: FieldRef<"horarios", 'DateTime'>
    readonly id_turma: FieldRef<"horarios", 'Int'>
    readonly Disciplina: FieldRef<"horarios", 'String'>
  }
    

  // Custom InputTypes
  /**
   * horarios findUnique
   */
  export type horariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
    /**
     * Filter, which horarios to fetch.
     */
    where: horariosWhereUniqueInput
  }

  /**
   * horarios findUniqueOrThrow
   */
  export type horariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
    /**
     * Filter, which horarios to fetch.
     */
    where: horariosWhereUniqueInput
  }

  /**
   * horarios findFirst
   */
  export type horariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
    /**
     * Filter, which horarios to fetch.
     */
    where?: horariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of horarios to fetch.
     */
    orderBy?: horariosOrderByWithRelationInput | horariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for horarios.
     */
    cursor?: horariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` horarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` horarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of horarios.
     */
    distinct?: HorariosScalarFieldEnum | HorariosScalarFieldEnum[]
  }

  /**
   * horarios findFirstOrThrow
   */
  export type horariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
    /**
     * Filter, which horarios to fetch.
     */
    where?: horariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of horarios to fetch.
     */
    orderBy?: horariosOrderByWithRelationInput | horariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for horarios.
     */
    cursor?: horariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` horarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` horarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of horarios.
     */
    distinct?: HorariosScalarFieldEnum | HorariosScalarFieldEnum[]
  }

  /**
   * horarios findMany
   */
  export type horariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
    /**
     * Filter, which horarios to fetch.
     */
    where?: horariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of horarios to fetch.
     */
    orderBy?: horariosOrderByWithRelationInput | horariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing horarios.
     */
    cursor?: horariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` horarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` horarios.
     */
    skip?: number
    distinct?: HorariosScalarFieldEnum | HorariosScalarFieldEnum[]
  }

  /**
   * horarios create
   */
  export type horariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
    /**
     * The data needed to create a horarios.
     */
    data: XOR<horariosCreateInput, horariosUncheckedCreateInput>
  }

  /**
   * horarios createMany
   */
  export type horariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many horarios.
     */
    data: horariosCreateManyInput | horariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * horarios update
   */
  export type horariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
    /**
     * The data needed to update a horarios.
     */
    data: XOR<horariosUpdateInput, horariosUncheckedUpdateInput>
    /**
     * Choose, which horarios to update.
     */
    where: horariosWhereUniqueInput
  }

  /**
   * horarios updateMany
   */
  export type horariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update horarios.
     */
    data: XOR<horariosUpdateManyMutationInput, horariosUncheckedUpdateManyInput>
    /**
     * Filter which horarios to update
     */
    where?: horariosWhereInput
  }

  /**
   * horarios upsert
   */
  export type horariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
    /**
     * The filter to search for the horarios to update in case it exists.
     */
    where: horariosWhereUniqueInput
    /**
     * In case the horarios found by the `where` argument doesn't exist, create a new horarios with this data.
     */
    create: XOR<horariosCreateInput, horariosUncheckedCreateInput>
    /**
     * In case the horarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<horariosUpdateInput, horariosUncheckedUpdateInput>
  }

  /**
   * horarios delete
   */
  export type horariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
    /**
     * Filter which horarios to delete.
     */
    where: horariosWhereUniqueInput
  }

  /**
   * horarios deleteMany
   */
  export type horariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which horarios to delete
     */
    where?: horariosWhereInput
  }

  /**
   * horarios without action
   */
  export type horariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the horarios
     */
    select?: horariosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: horariosInclude<ExtArgs> | null
  }


  /**
   * Model utilizadores
   */

  export type AggregateUtilizadores = {
    _count: UtilizadoresCountAggregateOutputType | null
    _avg: UtilizadoresAvgAggregateOutputType | null
    _sum: UtilizadoresSumAggregateOutputType | null
    _min: UtilizadoresMinAggregateOutputType | null
    _max: UtilizadoresMaxAggregateOutputType | null
  }

  export type UtilizadoresAvgAggregateOutputType = {
    id_utilizador: number | null
    id_turma: number | null
  }

  export type UtilizadoresSumAggregateOutputType = {
    id_utilizador: number | null
    id_turma: number | null
  }

  export type UtilizadoresMinAggregateOutputType = {
    id_utilizador: number | null
    Nome: string | null
    Email: string | null
    Passe: string | null
    isAdmin: boolean | null
    id_turma: number | null
  }

  export type UtilizadoresMaxAggregateOutputType = {
    id_utilizador: number | null
    Nome: string | null
    Email: string | null
    Passe: string | null
    isAdmin: boolean | null
    id_turma: number | null
  }

  export type UtilizadoresCountAggregateOutputType = {
    id_utilizador: number
    Nome: number
    Email: number
    Passe: number
    isAdmin: number
    id_turma: number
    _all: number
  }


  export type UtilizadoresAvgAggregateInputType = {
    id_utilizador?: true
    id_turma?: true
  }

  export type UtilizadoresSumAggregateInputType = {
    id_utilizador?: true
    id_turma?: true
  }

  export type UtilizadoresMinAggregateInputType = {
    id_utilizador?: true
    Nome?: true
    Email?: true
    Passe?: true
    isAdmin?: true
    id_turma?: true
  }

  export type UtilizadoresMaxAggregateInputType = {
    id_utilizador?: true
    Nome?: true
    Email?: true
    Passe?: true
    isAdmin?: true
    id_turma?: true
  }

  export type UtilizadoresCountAggregateInputType = {
    id_utilizador?: true
    Nome?: true
    Email?: true
    Passe?: true
    isAdmin?: true
    id_turma?: true
    _all?: true
  }

  export type UtilizadoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which utilizadores to aggregate.
     */
    where?: utilizadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of utilizadores to fetch.
     */
    orderBy?: utilizadoresOrderByWithRelationInput | utilizadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: utilizadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` utilizadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` utilizadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned utilizadores
    **/
    _count?: true | UtilizadoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UtilizadoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UtilizadoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UtilizadoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UtilizadoresMaxAggregateInputType
  }

  export type GetUtilizadoresAggregateType<T extends UtilizadoresAggregateArgs> = {
        [P in keyof T & keyof AggregateUtilizadores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUtilizadores[P]>
      : GetScalarType<T[P], AggregateUtilizadores[P]>
  }




  export type utilizadoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: utilizadoresWhereInput
    orderBy?: utilizadoresOrderByWithAggregationInput | utilizadoresOrderByWithAggregationInput[]
    by: UtilizadoresScalarFieldEnum[] | UtilizadoresScalarFieldEnum
    having?: utilizadoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UtilizadoresCountAggregateInputType | true
    _avg?: UtilizadoresAvgAggregateInputType
    _sum?: UtilizadoresSumAggregateInputType
    _min?: UtilizadoresMinAggregateInputType
    _max?: UtilizadoresMaxAggregateInputType
  }

  export type UtilizadoresGroupByOutputType = {
    id_utilizador: number
    Nome: string | null
    Email: string | null
    Passe: string | null
    isAdmin: boolean
    id_turma: number | null
    _count: UtilizadoresCountAggregateOutputType | null
    _avg: UtilizadoresAvgAggregateOutputType | null
    _sum: UtilizadoresSumAggregateOutputType | null
    _min: UtilizadoresMinAggregateOutputType | null
    _max: UtilizadoresMaxAggregateOutputType | null
  }

  type GetUtilizadoresGroupByPayload<T extends utilizadoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UtilizadoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UtilizadoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UtilizadoresGroupByOutputType[P]>
            : GetScalarType<T[P], UtilizadoresGroupByOutputType[P]>
        }
      >
    >


  export type utilizadoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_utilizador?: boolean
    Nome?: boolean
    Email?: boolean
    Passe?: boolean
    isAdmin?: boolean
    id_turma?: boolean
    turmas?: boolean | utilizadores$turmasArgs<ExtArgs>
  }, ExtArgs["result"]["utilizadores"]>

  export type utilizadoresSelectScalar = {
    id_utilizador?: boolean
    Nome?: boolean
    Email?: boolean
    Passe?: boolean
    isAdmin?: boolean
    id_turma?: boolean
  }


  export type utilizadoresInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turmas?: boolean | utilizadores$turmasArgs<ExtArgs>
  }


  export type $utilizadoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "utilizadores"
    objects: {
      turmas: Prisma.$turmasPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id_utilizador: number
      Nome: string | null
      Email: string | null
      Passe: string | null
      isAdmin: boolean
      id_turma: number | null
    }, ExtArgs["result"]["utilizadores"]>
    composites: {}
  }


  type utilizadoresGetPayload<S extends boolean | null | undefined | utilizadoresDefaultArgs> = $Result.GetResult<Prisma.$utilizadoresPayload, S>

  type utilizadoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<utilizadoresFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UtilizadoresCountAggregateInputType | true
    }

  export interface utilizadoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['utilizadores'], meta: { name: 'utilizadores' } }
    /**
     * Find zero or one Utilizadores that matches the filter.
     * @param {utilizadoresFindUniqueArgs} args - Arguments to find a Utilizadores
     * @example
     * // Get one Utilizadores
     * const utilizadores = await prisma.utilizadores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends utilizadoresFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, utilizadoresFindUniqueArgs<ExtArgs>>
    ): Prisma__utilizadoresClient<$Result.GetResult<Prisma.$utilizadoresPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Utilizadores that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {utilizadoresFindUniqueOrThrowArgs} args - Arguments to find a Utilizadores
     * @example
     * // Get one Utilizadores
     * const utilizadores = await prisma.utilizadores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends utilizadoresFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, utilizadoresFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__utilizadoresClient<$Result.GetResult<Prisma.$utilizadoresPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Utilizadores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilizadoresFindFirstArgs} args - Arguments to find a Utilizadores
     * @example
     * // Get one Utilizadores
     * const utilizadores = await prisma.utilizadores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends utilizadoresFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, utilizadoresFindFirstArgs<ExtArgs>>
    ): Prisma__utilizadoresClient<$Result.GetResult<Prisma.$utilizadoresPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Utilizadores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilizadoresFindFirstOrThrowArgs} args - Arguments to find a Utilizadores
     * @example
     * // Get one Utilizadores
     * const utilizadores = await prisma.utilizadores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends utilizadoresFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, utilizadoresFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__utilizadoresClient<$Result.GetResult<Prisma.$utilizadoresPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Utilizadores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilizadoresFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Utilizadores
     * const utilizadores = await prisma.utilizadores.findMany()
     * 
     * // Get first 10 Utilizadores
     * const utilizadores = await prisma.utilizadores.findMany({ take: 10 })
     * 
     * // Only select the `id_utilizador`
     * const utilizadoresWithId_utilizadorOnly = await prisma.utilizadores.findMany({ select: { id_utilizador: true } })
     * 
    **/
    findMany<T extends utilizadoresFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, utilizadoresFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$utilizadoresPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Utilizadores.
     * @param {utilizadoresCreateArgs} args - Arguments to create a Utilizadores.
     * @example
     * // Create one Utilizadores
     * const Utilizadores = await prisma.utilizadores.create({
     *   data: {
     *     // ... data to create a Utilizadores
     *   }
     * })
     * 
    **/
    create<T extends utilizadoresCreateArgs<ExtArgs>>(
      args: SelectSubset<T, utilizadoresCreateArgs<ExtArgs>>
    ): Prisma__utilizadoresClient<$Result.GetResult<Prisma.$utilizadoresPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Utilizadores.
     * @param {utilizadoresCreateManyArgs} args - Arguments to create many Utilizadores.
     * @example
     * // Create many Utilizadores
     * const utilizadores = await prisma.utilizadores.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends utilizadoresCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, utilizadoresCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Utilizadores.
     * @param {utilizadoresDeleteArgs} args - Arguments to delete one Utilizadores.
     * @example
     * // Delete one Utilizadores
     * const Utilizadores = await prisma.utilizadores.delete({
     *   where: {
     *     // ... filter to delete one Utilizadores
     *   }
     * })
     * 
    **/
    delete<T extends utilizadoresDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, utilizadoresDeleteArgs<ExtArgs>>
    ): Prisma__utilizadoresClient<$Result.GetResult<Prisma.$utilizadoresPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Utilizadores.
     * @param {utilizadoresUpdateArgs} args - Arguments to update one Utilizadores.
     * @example
     * // Update one Utilizadores
     * const utilizadores = await prisma.utilizadores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends utilizadoresUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, utilizadoresUpdateArgs<ExtArgs>>
    ): Prisma__utilizadoresClient<$Result.GetResult<Prisma.$utilizadoresPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Utilizadores.
     * @param {utilizadoresDeleteManyArgs} args - Arguments to filter Utilizadores to delete.
     * @example
     * // Delete a few Utilizadores
     * const { count } = await prisma.utilizadores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends utilizadoresDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, utilizadoresDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Utilizadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilizadoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Utilizadores
     * const utilizadores = await prisma.utilizadores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends utilizadoresUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, utilizadoresUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Utilizadores.
     * @param {utilizadoresUpsertArgs} args - Arguments to update or create a Utilizadores.
     * @example
     * // Update or create a Utilizadores
     * const utilizadores = await prisma.utilizadores.upsert({
     *   create: {
     *     // ... data to create a Utilizadores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Utilizadores we want to update
     *   }
     * })
    **/
    upsert<T extends utilizadoresUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, utilizadoresUpsertArgs<ExtArgs>>
    ): Prisma__utilizadoresClient<$Result.GetResult<Prisma.$utilizadoresPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Utilizadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilizadoresCountArgs} args - Arguments to filter Utilizadores to count.
     * @example
     * // Count the number of Utilizadores
     * const count = await prisma.utilizadores.count({
     *   where: {
     *     // ... the filter for the Utilizadores we want to count
     *   }
     * })
    **/
    count<T extends utilizadoresCountArgs>(
      args?: Subset<T, utilizadoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UtilizadoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Utilizadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UtilizadoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UtilizadoresAggregateArgs>(args: Subset<T, UtilizadoresAggregateArgs>): Prisma.PrismaPromise<GetUtilizadoresAggregateType<T>>

    /**
     * Group by Utilizadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {utilizadoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends utilizadoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: utilizadoresGroupByArgs['orderBy'] }
        : { orderBy?: utilizadoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, utilizadoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUtilizadoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the utilizadores model
   */
  readonly fields: utilizadoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for utilizadores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__utilizadoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    turmas<T extends utilizadores$turmasArgs<ExtArgs> = {}>(args?: Subset<T, utilizadores$turmasArgs<ExtArgs>>): Prisma__turmasClient<$Result.GetResult<Prisma.$turmasPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the utilizadores model
   */ 
  interface utilizadoresFieldRefs {
    readonly id_utilizador: FieldRef<"utilizadores", 'Int'>
    readonly Nome: FieldRef<"utilizadores", 'String'>
    readonly Email: FieldRef<"utilizadores", 'String'>
    readonly Passe: FieldRef<"utilizadores", 'String'>
    readonly isAdmin: FieldRef<"utilizadores", 'Boolean'>
    readonly id_turma: FieldRef<"utilizadores", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * utilizadores findUnique
   */
  export type utilizadoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
    /**
     * Filter, which utilizadores to fetch.
     */
    where: utilizadoresWhereUniqueInput
  }

  /**
   * utilizadores findUniqueOrThrow
   */
  export type utilizadoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
    /**
     * Filter, which utilizadores to fetch.
     */
    where: utilizadoresWhereUniqueInput
  }

  /**
   * utilizadores findFirst
   */
  export type utilizadoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
    /**
     * Filter, which utilizadores to fetch.
     */
    where?: utilizadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of utilizadores to fetch.
     */
    orderBy?: utilizadoresOrderByWithRelationInput | utilizadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for utilizadores.
     */
    cursor?: utilizadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` utilizadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` utilizadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of utilizadores.
     */
    distinct?: UtilizadoresScalarFieldEnum | UtilizadoresScalarFieldEnum[]
  }

  /**
   * utilizadores findFirstOrThrow
   */
  export type utilizadoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
    /**
     * Filter, which utilizadores to fetch.
     */
    where?: utilizadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of utilizadores to fetch.
     */
    orderBy?: utilizadoresOrderByWithRelationInput | utilizadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for utilizadores.
     */
    cursor?: utilizadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` utilizadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` utilizadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of utilizadores.
     */
    distinct?: UtilizadoresScalarFieldEnum | UtilizadoresScalarFieldEnum[]
  }

  /**
   * utilizadores findMany
   */
  export type utilizadoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
    /**
     * Filter, which utilizadores to fetch.
     */
    where?: utilizadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of utilizadores to fetch.
     */
    orderBy?: utilizadoresOrderByWithRelationInput | utilizadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing utilizadores.
     */
    cursor?: utilizadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` utilizadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` utilizadores.
     */
    skip?: number
    distinct?: UtilizadoresScalarFieldEnum | UtilizadoresScalarFieldEnum[]
  }

  /**
   * utilizadores create
   */
  export type utilizadoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
    /**
     * The data needed to create a utilizadores.
     */
    data?: XOR<utilizadoresCreateInput, utilizadoresUncheckedCreateInput>
  }

  /**
   * utilizadores createMany
   */
  export type utilizadoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many utilizadores.
     */
    data: utilizadoresCreateManyInput | utilizadoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * utilizadores update
   */
  export type utilizadoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
    /**
     * The data needed to update a utilizadores.
     */
    data: XOR<utilizadoresUpdateInput, utilizadoresUncheckedUpdateInput>
    /**
     * Choose, which utilizadores to update.
     */
    where: utilizadoresWhereUniqueInput
  }

  /**
   * utilizadores updateMany
   */
  export type utilizadoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update utilizadores.
     */
    data: XOR<utilizadoresUpdateManyMutationInput, utilizadoresUncheckedUpdateManyInput>
    /**
     * Filter which utilizadores to update
     */
    where?: utilizadoresWhereInput
  }

  /**
   * utilizadores upsert
   */
  export type utilizadoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
    /**
     * The filter to search for the utilizadores to update in case it exists.
     */
    where: utilizadoresWhereUniqueInput
    /**
     * In case the utilizadores found by the `where` argument doesn't exist, create a new utilizadores with this data.
     */
    create: XOR<utilizadoresCreateInput, utilizadoresUncheckedCreateInput>
    /**
     * In case the utilizadores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<utilizadoresUpdateInput, utilizadoresUncheckedUpdateInput>
  }

  /**
   * utilizadores delete
   */
  export type utilizadoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
    /**
     * Filter which utilizadores to delete.
     */
    where: utilizadoresWhereUniqueInput
  }

  /**
   * utilizadores deleteMany
   */
  export type utilizadoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which utilizadores to delete
     */
    where?: utilizadoresWhereInput
  }

  /**
   * utilizadores.turmas
   */
  export type utilizadores$turmasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the turmas
     */
    select?: turmasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: turmasInclude<ExtArgs> | null
    where?: turmasWhereInput
  }

  /**
   * utilizadores without action
   */
  export type utilizadoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the utilizadores
     */
    select?: utilizadoresSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: utilizadoresInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TurmasScalarFieldEnum: {
    id_turma: 'id_turma',
    NomeTurma: 'NomeTurma',
    Descricao: 'Descricao'
  };

  export type TurmasScalarFieldEnum = (typeof TurmasScalarFieldEnum)[keyof typeof TurmasScalarFieldEnum]


  export const HorariosScalarFieldEnum: {
    id_horario: 'id_horario',
    Data_inicio: 'Data_inicio',
    Data_fim: 'Data_fim',
    id_turma: 'id_turma',
    Disciplina: 'Disciplina'
  };

  export type HorariosScalarFieldEnum = (typeof HorariosScalarFieldEnum)[keyof typeof HorariosScalarFieldEnum]


  export const UtilizadoresScalarFieldEnum: {
    id_utilizador: 'id_utilizador',
    Nome: 'Nome',
    Email: 'Email',
    Passe: 'Passe',
    isAdmin: 'isAdmin',
    id_turma: 'id_turma'
  };

  export type UtilizadoresScalarFieldEnum = (typeof UtilizadoresScalarFieldEnum)[keyof typeof UtilizadoresScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type turmasWhereInput = {
    AND?: turmasWhereInput | turmasWhereInput[]
    OR?: turmasWhereInput[]
    NOT?: turmasWhereInput | turmasWhereInput[]
    id_turma?: IntFilter<"turmas"> | number
    NomeTurma?: StringFilter<"turmas"> | string
    Descricao?: StringNullableFilter<"turmas"> | string | null
    horarios?: HorariosListRelationFilter
    utilizadores?: UtilizadoresListRelationFilter
  }

  export type turmasOrderByWithRelationInput = {
    id_turma?: SortOrder
    NomeTurma?: SortOrder
    Descricao?: SortOrderInput | SortOrder
    horarios?: horariosOrderByRelationAggregateInput
    utilizadores?: utilizadoresOrderByRelationAggregateInput
  }

  export type turmasWhereUniqueInput = Prisma.AtLeast<{
    id_turma?: number
    AND?: turmasWhereInput | turmasWhereInput[]
    OR?: turmasWhereInput[]
    NOT?: turmasWhereInput | turmasWhereInput[]
    NomeTurma?: StringFilter<"turmas"> | string
    Descricao?: StringNullableFilter<"turmas"> | string | null
    horarios?: HorariosListRelationFilter
    utilizadores?: UtilizadoresListRelationFilter
  }, "id_turma">

  export type turmasOrderByWithAggregationInput = {
    id_turma?: SortOrder
    NomeTurma?: SortOrder
    Descricao?: SortOrderInput | SortOrder
    _count?: turmasCountOrderByAggregateInput
    _avg?: turmasAvgOrderByAggregateInput
    _max?: turmasMaxOrderByAggregateInput
    _min?: turmasMinOrderByAggregateInput
    _sum?: turmasSumOrderByAggregateInput
  }

  export type turmasScalarWhereWithAggregatesInput = {
    AND?: turmasScalarWhereWithAggregatesInput | turmasScalarWhereWithAggregatesInput[]
    OR?: turmasScalarWhereWithAggregatesInput[]
    NOT?: turmasScalarWhereWithAggregatesInput | turmasScalarWhereWithAggregatesInput[]
    id_turma?: IntWithAggregatesFilter<"turmas"> | number
    NomeTurma?: StringWithAggregatesFilter<"turmas"> | string
    Descricao?: StringNullableWithAggregatesFilter<"turmas"> | string | null
  }

  export type horariosWhereInput = {
    AND?: horariosWhereInput | horariosWhereInput[]
    OR?: horariosWhereInput[]
    NOT?: horariosWhereInput | horariosWhereInput[]
    id_horario?: IntFilter<"horarios"> | number
    Data_inicio?: DateTimeNullableFilter<"horarios"> | Date | string | null
    Data_fim?: DateTimeNullableFilter<"horarios"> | Date | string | null
    id_turma?: IntFilter<"horarios"> | number
    Disciplina?: StringFilter<"horarios"> | string
    turma?: XOR<TurmasRelationFilter, turmasWhereInput>
  }

  export type horariosOrderByWithRelationInput = {
    id_horario?: SortOrder
    Data_inicio?: SortOrderInput | SortOrder
    Data_fim?: SortOrderInput | SortOrder
    id_turma?: SortOrder
    Disciplina?: SortOrder
    turma?: turmasOrderByWithRelationInput
  }

  export type horariosWhereUniqueInput = Prisma.AtLeast<{
    id_horario?: number
    AND?: horariosWhereInput | horariosWhereInput[]
    OR?: horariosWhereInput[]
    NOT?: horariosWhereInput | horariosWhereInput[]
    Data_inicio?: DateTimeNullableFilter<"horarios"> | Date | string | null
    Data_fim?: DateTimeNullableFilter<"horarios"> | Date | string | null
    id_turma?: IntFilter<"horarios"> | number
    Disciplina?: StringFilter<"horarios"> | string
    turma?: XOR<TurmasRelationFilter, turmasWhereInput>
  }, "id_horario">

  export type horariosOrderByWithAggregationInput = {
    id_horario?: SortOrder
    Data_inicio?: SortOrderInput | SortOrder
    Data_fim?: SortOrderInput | SortOrder
    id_turma?: SortOrder
    Disciplina?: SortOrder
    _count?: horariosCountOrderByAggregateInput
    _avg?: horariosAvgOrderByAggregateInput
    _max?: horariosMaxOrderByAggregateInput
    _min?: horariosMinOrderByAggregateInput
    _sum?: horariosSumOrderByAggregateInput
  }

  export type horariosScalarWhereWithAggregatesInput = {
    AND?: horariosScalarWhereWithAggregatesInput | horariosScalarWhereWithAggregatesInput[]
    OR?: horariosScalarWhereWithAggregatesInput[]
    NOT?: horariosScalarWhereWithAggregatesInput | horariosScalarWhereWithAggregatesInput[]
    id_horario?: IntWithAggregatesFilter<"horarios"> | number
    Data_inicio?: DateTimeNullableWithAggregatesFilter<"horarios"> | Date | string | null
    Data_fim?: DateTimeNullableWithAggregatesFilter<"horarios"> | Date | string | null
    id_turma?: IntWithAggregatesFilter<"horarios"> | number
    Disciplina?: StringWithAggregatesFilter<"horarios"> | string
  }

  export type utilizadoresWhereInput = {
    AND?: utilizadoresWhereInput | utilizadoresWhereInput[]
    OR?: utilizadoresWhereInput[]
    NOT?: utilizadoresWhereInput | utilizadoresWhereInput[]
    id_utilizador?: IntFilter<"utilizadores"> | number
    Nome?: StringNullableFilter<"utilizadores"> | string | null
    Email?: StringNullableFilter<"utilizadores"> | string | null
    Passe?: StringNullableFilter<"utilizadores"> | string | null
    isAdmin?: BoolFilter<"utilizadores"> | boolean
    id_turma?: IntNullableFilter<"utilizadores"> | number | null
    turmas?: XOR<TurmasNullableRelationFilter, turmasWhereInput> | null
  }

  export type utilizadoresOrderByWithRelationInput = {
    id_utilizador?: SortOrder
    Nome?: SortOrderInput | SortOrder
    Email?: SortOrderInput | SortOrder
    Passe?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    id_turma?: SortOrderInput | SortOrder
    turmas?: turmasOrderByWithRelationInput
  }

  export type utilizadoresWhereUniqueInput = Prisma.AtLeast<{
    id_utilizador?: number
    Email?: string
    AND?: utilizadoresWhereInput | utilizadoresWhereInput[]
    OR?: utilizadoresWhereInput[]
    NOT?: utilizadoresWhereInput | utilizadoresWhereInput[]
    Nome?: StringNullableFilter<"utilizadores"> | string | null
    Passe?: StringNullableFilter<"utilizadores"> | string | null
    isAdmin?: BoolFilter<"utilizadores"> | boolean
    id_turma?: IntNullableFilter<"utilizadores"> | number | null
    turmas?: XOR<TurmasNullableRelationFilter, turmasWhereInput> | null
  }, "id_utilizador" | "Email">

  export type utilizadoresOrderByWithAggregationInput = {
    id_utilizador?: SortOrder
    Nome?: SortOrderInput | SortOrder
    Email?: SortOrderInput | SortOrder
    Passe?: SortOrderInput | SortOrder
    isAdmin?: SortOrder
    id_turma?: SortOrderInput | SortOrder
    _count?: utilizadoresCountOrderByAggregateInput
    _avg?: utilizadoresAvgOrderByAggregateInput
    _max?: utilizadoresMaxOrderByAggregateInput
    _min?: utilizadoresMinOrderByAggregateInput
    _sum?: utilizadoresSumOrderByAggregateInput
  }

  export type utilizadoresScalarWhereWithAggregatesInput = {
    AND?: utilizadoresScalarWhereWithAggregatesInput | utilizadoresScalarWhereWithAggregatesInput[]
    OR?: utilizadoresScalarWhereWithAggregatesInput[]
    NOT?: utilizadoresScalarWhereWithAggregatesInput | utilizadoresScalarWhereWithAggregatesInput[]
    id_utilizador?: IntWithAggregatesFilter<"utilizadores"> | number
    Nome?: StringNullableWithAggregatesFilter<"utilizadores"> | string | null
    Email?: StringNullableWithAggregatesFilter<"utilizadores"> | string | null
    Passe?: StringNullableWithAggregatesFilter<"utilizadores"> | string | null
    isAdmin?: BoolWithAggregatesFilter<"utilizadores"> | boolean
    id_turma?: IntNullableWithAggregatesFilter<"utilizadores"> | number | null
  }

  export type turmasCreateInput = {
    NomeTurma: string
    Descricao?: string | null
    horarios?: horariosCreateNestedManyWithoutTurmaInput
    utilizadores?: utilizadoresCreateNestedManyWithoutTurmasInput
  }

  export type turmasUncheckedCreateInput = {
    id_turma?: number
    NomeTurma: string
    Descricao?: string | null
    horarios?: horariosUncheckedCreateNestedManyWithoutTurmaInput
    utilizadores?: utilizadoresUncheckedCreateNestedManyWithoutTurmasInput
  }

  export type turmasUpdateInput = {
    NomeTurma?: StringFieldUpdateOperationsInput | string
    Descricao?: NullableStringFieldUpdateOperationsInput | string | null
    horarios?: horariosUpdateManyWithoutTurmaNestedInput
    utilizadores?: utilizadoresUpdateManyWithoutTurmasNestedInput
  }

  export type turmasUncheckedUpdateInput = {
    id_turma?: IntFieldUpdateOperationsInput | number
    NomeTurma?: StringFieldUpdateOperationsInput | string
    Descricao?: NullableStringFieldUpdateOperationsInput | string | null
    horarios?: horariosUncheckedUpdateManyWithoutTurmaNestedInput
    utilizadores?: utilizadoresUncheckedUpdateManyWithoutTurmasNestedInput
  }

  export type turmasCreateManyInput = {
    id_turma?: number
    NomeTurma: string
    Descricao?: string | null
  }

  export type turmasUpdateManyMutationInput = {
    NomeTurma?: StringFieldUpdateOperationsInput | string
    Descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type turmasUncheckedUpdateManyInput = {
    id_turma?: IntFieldUpdateOperationsInput | number
    NomeTurma?: StringFieldUpdateOperationsInput | string
    Descricao?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type horariosCreateInput = {
    Data_inicio?: Date | string | null
    Data_fim?: Date | string | null
    Disciplina: string
    turma: turmasCreateNestedOneWithoutHorariosInput
  }

  export type horariosUncheckedCreateInput = {
    id_horario?: number
    Data_inicio?: Date | string | null
    Data_fim?: Date | string | null
    id_turma: number
    Disciplina: string
  }

  export type horariosUpdateInput = {
    Data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Data_fim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Disciplina?: StringFieldUpdateOperationsInput | string
    turma?: turmasUpdateOneRequiredWithoutHorariosNestedInput
  }

  export type horariosUncheckedUpdateInput = {
    id_horario?: IntFieldUpdateOperationsInput | number
    Data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Data_fim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_turma?: IntFieldUpdateOperationsInput | number
    Disciplina?: StringFieldUpdateOperationsInput | string
  }

  export type horariosCreateManyInput = {
    id_horario?: number
    Data_inicio?: Date | string | null
    Data_fim?: Date | string | null
    id_turma: number
    Disciplina: string
  }

  export type horariosUpdateManyMutationInput = {
    Data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Data_fim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Disciplina?: StringFieldUpdateOperationsInput | string
  }

  export type horariosUncheckedUpdateManyInput = {
    id_horario?: IntFieldUpdateOperationsInput | number
    Data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Data_fim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_turma?: IntFieldUpdateOperationsInput | number
    Disciplina?: StringFieldUpdateOperationsInput | string
  }

  export type utilizadoresCreateInput = {
    Nome?: string | null
    Email?: string | null
    Passe?: string | null
    isAdmin?: boolean
    turmas?: turmasCreateNestedOneWithoutUtilizadoresInput
  }

  export type utilizadoresUncheckedCreateInput = {
    id_utilizador?: number
    Nome?: string | null
    Email?: string | null
    Passe?: string | null
    isAdmin?: boolean
    id_turma?: number | null
  }

  export type utilizadoresUpdateInput = {
    Nome?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Passe?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    turmas?: turmasUpdateOneWithoutUtilizadoresNestedInput
  }

  export type utilizadoresUncheckedUpdateInput = {
    id_utilizador?: IntFieldUpdateOperationsInput | number
    Nome?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Passe?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    id_turma?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type utilizadoresCreateManyInput = {
    id_utilizador?: number
    Nome?: string | null
    Email?: string | null
    Passe?: string | null
    isAdmin?: boolean
    id_turma?: number | null
  }

  export type utilizadoresUpdateManyMutationInput = {
    Nome?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Passe?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type utilizadoresUncheckedUpdateManyInput = {
    id_utilizador?: IntFieldUpdateOperationsInput | number
    Nome?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Passe?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    id_turma?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type HorariosListRelationFilter = {
    every?: horariosWhereInput
    some?: horariosWhereInput
    none?: horariosWhereInput
  }

  export type UtilizadoresListRelationFilter = {
    every?: utilizadoresWhereInput
    some?: utilizadoresWhereInput
    none?: utilizadoresWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type horariosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type utilizadoresOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type turmasCountOrderByAggregateInput = {
    id_turma?: SortOrder
    NomeTurma?: SortOrder
    Descricao?: SortOrder
  }

  export type turmasAvgOrderByAggregateInput = {
    id_turma?: SortOrder
  }

  export type turmasMaxOrderByAggregateInput = {
    id_turma?: SortOrder
    NomeTurma?: SortOrder
    Descricao?: SortOrder
  }

  export type turmasMinOrderByAggregateInput = {
    id_turma?: SortOrder
    NomeTurma?: SortOrder
    Descricao?: SortOrder
  }

  export type turmasSumOrderByAggregateInput = {
    id_turma?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type TurmasRelationFilter = {
    is?: turmasWhereInput
    isNot?: turmasWhereInput
  }

  export type horariosCountOrderByAggregateInput = {
    id_horario?: SortOrder
    Data_inicio?: SortOrder
    Data_fim?: SortOrder
    id_turma?: SortOrder
    Disciplina?: SortOrder
  }

  export type horariosAvgOrderByAggregateInput = {
    id_horario?: SortOrder
    id_turma?: SortOrder
  }

  export type horariosMaxOrderByAggregateInput = {
    id_horario?: SortOrder
    Data_inicio?: SortOrder
    Data_fim?: SortOrder
    id_turma?: SortOrder
    Disciplina?: SortOrder
  }

  export type horariosMinOrderByAggregateInput = {
    id_horario?: SortOrder
    Data_inicio?: SortOrder
    Data_fim?: SortOrder
    id_turma?: SortOrder
    Disciplina?: SortOrder
  }

  export type horariosSumOrderByAggregateInput = {
    id_horario?: SortOrder
    id_turma?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TurmasNullableRelationFilter = {
    is?: turmasWhereInput | null
    isNot?: turmasWhereInput | null
  }

  export type utilizadoresCountOrderByAggregateInput = {
    id_utilizador?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Passe?: SortOrder
    isAdmin?: SortOrder
    id_turma?: SortOrder
  }

  export type utilizadoresAvgOrderByAggregateInput = {
    id_utilizador?: SortOrder
    id_turma?: SortOrder
  }

  export type utilizadoresMaxOrderByAggregateInput = {
    id_utilizador?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Passe?: SortOrder
    isAdmin?: SortOrder
    id_turma?: SortOrder
  }

  export type utilizadoresMinOrderByAggregateInput = {
    id_utilizador?: SortOrder
    Nome?: SortOrder
    Email?: SortOrder
    Passe?: SortOrder
    isAdmin?: SortOrder
    id_turma?: SortOrder
  }

  export type utilizadoresSumOrderByAggregateInput = {
    id_utilizador?: SortOrder
    id_turma?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type horariosCreateNestedManyWithoutTurmaInput = {
    create?: XOR<horariosCreateWithoutTurmaInput, horariosUncheckedCreateWithoutTurmaInput> | horariosCreateWithoutTurmaInput[] | horariosUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: horariosCreateOrConnectWithoutTurmaInput | horariosCreateOrConnectWithoutTurmaInput[]
    createMany?: horariosCreateManyTurmaInputEnvelope
    connect?: horariosWhereUniqueInput | horariosWhereUniqueInput[]
  }

  export type utilizadoresCreateNestedManyWithoutTurmasInput = {
    create?: XOR<utilizadoresCreateWithoutTurmasInput, utilizadoresUncheckedCreateWithoutTurmasInput> | utilizadoresCreateWithoutTurmasInput[] | utilizadoresUncheckedCreateWithoutTurmasInput[]
    connectOrCreate?: utilizadoresCreateOrConnectWithoutTurmasInput | utilizadoresCreateOrConnectWithoutTurmasInput[]
    createMany?: utilizadoresCreateManyTurmasInputEnvelope
    connect?: utilizadoresWhereUniqueInput | utilizadoresWhereUniqueInput[]
  }

  export type horariosUncheckedCreateNestedManyWithoutTurmaInput = {
    create?: XOR<horariosCreateWithoutTurmaInput, horariosUncheckedCreateWithoutTurmaInput> | horariosCreateWithoutTurmaInput[] | horariosUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: horariosCreateOrConnectWithoutTurmaInput | horariosCreateOrConnectWithoutTurmaInput[]
    createMany?: horariosCreateManyTurmaInputEnvelope
    connect?: horariosWhereUniqueInput | horariosWhereUniqueInput[]
  }

  export type utilizadoresUncheckedCreateNestedManyWithoutTurmasInput = {
    create?: XOR<utilizadoresCreateWithoutTurmasInput, utilizadoresUncheckedCreateWithoutTurmasInput> | utilizadoresCreateWithoutTurmasInput[] | utilizadoresUncheckedCreateWithoutTurmasInput[]
    connectOrCreate?: utilizadoresCreateOrConnectWithoutTurmasInput | utilizadoresCreateOrConnectWithoutTurmasInput[]
    createMany?: utilizadoresCreateManyTurmasInputEnvelope
    connect?: utilizadoresWhereUniqueInput | utilizadoresWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type horariosUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<horariosCreateWithoutTurmaInput, horariosUncheckedCreateWithoutTurmaInput> | horariosCreateWithoutTurmaInput[] | horariosUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: horariosCreateOrConnectWithoutTurmaInput | horariosCreateOrConnectWithoutTurmaInput[]
    upsert?: horariosUpsertWithWhereUniqueWithoutTurmaInput | horariosUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: horariosCreateManyTurmaInputEnvelope
    set?: horariosWhereUniqueInput | horariosWhereUniqueInput[]
    disconnect?: horariosWhereUniqueInput | horariosWhereUniqueInput[]
    delete?: horariosWhereUniqueInput | horariosWhereUniqueInput[]
    connect?: horariosWhereUniqueInput | horariosWhereUniqueInput[]
    update?: horariosUpdateWithWhereUniqueWithoutTurmaInput | horariosUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: horariosUpdateManyWithWhereWithoutTurmaInput | horariosUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: horariosScalarWhereInput | horariosScalarWhereInput[]
  }

  export type utilizadoresUpdateManyWithoutTurmasNestedInput = {
    create?: XOR<utilizadoresCreateWithoutTurmasInput, utilizadoresUncheckedCreateWithoutTurmasInput> | utilizadoresCreateWithoutTurmasInput[] | utilizadoresUncheckedCreateWithoutTurmasInput[]
    connectOrCreate?: utilizadoresCreateOrConnectWithoutTurmasInput | utilizadoresCreateOrConnectWithoutTurmasInput[]
    upsert?: utilizadoresUpsertWithWhereUniqueWithoutTurmasInput | utilizadoresUpsertWithWhereUniqueWithoutTurmasInput[]
    createMany?: utilizadoresCreateManyTurmasInputEnvelope
    set?: utilizadoresWhereUniqueInput | utilizadoresWhereUniqueInput[]
    disconnect?: utilizadoresWhereUniqueInput | utilizadoresWhereUniqueInput[]
    delete?: utilizadoresWhereUniqueInput | utilizadoresWhereUniqueInput[]
    connect?: utilizadoresWhereUniqueInput | utilizadoresWhereUniqueInput[]
    update?: utilizadoresUpdateWithWhereUniqueWithoutTurmasInput | utilizadoresUpdateWithWhereUniqueWithoutTurmasInput[]
    updateMany?: utilizadoresUpdateManyWithWhereWithoutTurmasInput | utilizadoresUpdateManyWithWhereWithoutTurmasInput[]
    deleteMany?: utilizadoresScalarWhereInput | utilizadoresScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type horariosUncheckedUpdateManyWithoutTurmaNestedInput = {
    create?: XOR<horariosCreateWithoutTurmaInput, horariosUncheckedCreateWithoutTurmaInput> | horariosCreateWithoutTurmaInput[] | horariosUncheckedCreateWithoutTurmaInput[]
    connectOrCreate?: horariosCreateOrConnectWithoutTurmaInput | horariosCreateOrConnectWithoutTurmaInput[]
    upsert?: horariosUpsertWithWhereUniqueWithoutTurmaInput | horariosUpsertWithWhereUniqueWithoutTurmaInput[]
    createMany?: horariosCreateManyTurmaInputEnvelope
    set?: horariosWhereUniqueInput | horariosWhereUniqueInput[]
    disconnect?: horariosWhereUniqueInput | horariosWhereUniqueInput[]
    delete?: horariosWhereUniqueInput | horariosWhereUniqueInput[]
    connect?: horariosWhereUniqueInput | horariosWhereUniqueInput[]
    update?: horariosUpdateWithWhereUniqueWithoutTurmaInput | horariosUpdateWithWhereUniqueWithoutTurmaInput[]
    updateMany?: horariosUpdateManyWithWhereWithoutTurmaInput | horariosUpdateManyWithWhereWithoutTurmaInput[]
    deleteMany?: horariosScalarWhereInput | horariosScalarWhereInput[]
  }

  export type utilizadoresUncheckedUpdateManyWithoutTurmasNestedInput = {
    create?: XOR<utilizadoresCreateWithoutTurmasInput, utilizadoresUncheckedCreateWithoutTurmasInput> | utilizadoresCreateWithoutTurmasInput[] | utilizadoresUncheckedCreateWithoutTurmasInput[]
    connectOrCreate?: utilizadoresCreateOrConnectWithoutTurmasInput | utilizadoresCreateOrConnectWithoutTurmasInput[]
    upsert?: utilizadoresUpsertWithWhereUniqueWithoutTurmasInput | utilizadoresUpsertWithWhereUniqueWithoutTurmasInput[]
    createMany?: utilizadoresCreateManyTurmasInputEnvelope
    set?: utilizadoresWhereUniqueInput | utilizadoresWhereUniqueInput[]
    disconnect?: utilizadoresWhereUniqueInput | utilizadoresWhereUniqueInput[]
    delete?: utilizadoresWhereUniqueInput | utilizadoresWhereUniqueInput[]
    connect?: utilizadoresWhereUniqueInput | utilizadoresWhereUniqueInput[]
    update?: utilizadoresUpdateWithWhereUniqueWithoutTurmasInput | utilizadoresUpdateWithWhereUniqueWithoutTurmasInput[]
    updateMany?: utilizadoresUpdateManyWithWhereWithoutTurmasInput | utilizadoresUpdateManyWithWhereWithoutTurmasInput[]
    deleteMany?: utilizadoresScalarWhereInput | utilizadoresScalarWhereInput[]
  }

  export type turmasCreateNestedOneWithoutHorariosInput = {
    create?: XOR<turmasCreateWithoutHorariosInput, turmasUncheckedCreateWithoutHorariosInput>
    connectOrCreate?: turmasCreateOrConnectWithoutHorariosInput
    connect?: turmasWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type turmasUpdateOneRequiredWithoutHorariosNestedInput = {
    create?: XOR<turmasCreateWithoutHorariosInput, turmasUncheckedCreateWithoutHorariosInput>
    connectOrCreate?: turmasCreateOrConnectWithoutHorariosInput
    upsert?: turmasUpsertWithoutHorariosInput
    connect?: turmasWhereUniqueInput
    update?: XOR<XOR<turmasUpdateToOneWithWhereWithoutHorariosInput, turmasUpdateWithoutHorariosInput>, turmasUncheckedUpdateWithoutHorariosInput>
  }

  export type turmasCreateNestedOneWithoutUtilizadoresInput = {
    create?: XOR<turmasCreateWithoutUtilizadoresInput, turmasUncheckedCreateWithoutUtilizadoresInput>
    connectOrCreate?: turmasCreateOrConnectWithoutUtilizadoresInput
    connect?: turmasWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type turmasUpdateOneWithoutUtilizadoresNestedInput = {
    create?: XOR<turmasCreateWithoutUtilizadoresInput, turmasUncheckedCreateWithoutUtilizadoresInput>
    connectOrCreate?: turmasCreateOrConnectWithoutUtilizadoresInput
    upsert?: turmasUpsertWithoutUtilizadoresInput
    disconnect?: turmasWhereInput | boolean
    delete?: turmasWhereInput | boolean
    connect?: turmasWhereUniqueInput
    update?: XOR<XOR<turmasUpdateToOneWithWhereWithoutUtilizadoresInput, turmasUpdateWithoutUtilizadoresInput>, turmasUncheckedUpdateWithoutUtilizadoresInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type horariosCreateWithoutTurmaInput = {
    Data_inicio?: Date | string | null
    Data_fim?: Date | string | null
    Disciplina: string
  }

  export type horariosUncheckedCreateWithoutTurmaInput = {
    id_horario?: number
    Data_inicio?: Date | string | null
    Data_fim?: Date | string | null
    Disciplina: string
  }

  export type horariosCreateOrConnectWithoutTurmaInput = {
    where: horariosWhereUniqueInput
    create: XOR<horariosCreateWithoutTurmaInput, horariosUncheckedCreateWithoutTurmaInput>
  }

  export type horariosCreateManyTurmaInputEnvelope = {
    data: horariosCreateManyTurmaInput | horariosCreateManyTurmaInput[]
    skipDuplicates?: boolean
  }

  export type utilizadoresCreateWithoutTurmasInput = {
    Nome?: string | null
    Email?: string | null
    Passe?: string | null
    isAdmin?: boolean
  }

  export type utilizadoresUncheckedCreateWithoutTurmasInput = {
    id_utilizador?: number
    Nome?: string | null
    Email?: string | null
    Passe?: string | null
    isAdmin?: boolean
  }

  export type utilizadoresCreateOrConnectWithoutTurmasInput = {
    where: utilizadoresWhereUniqueInput
    create: XOR<utilizadoresCreateWithoutTurmasInput, utilizadoresUncheckedCreateWithoutTurmasInput>
  }

  export type utilizadoresCreateManyTurmasInputEnvelope = {
    data: utilizadoresCreateManyTurmasInput | utilizadoresCreateManyTurmasInput[]
    skipDuplicates?: boolean
  }

  export type horariosUpsertWithWhereUniqueWithoutTurmaInput = {
    where: horariosWhereUniqueInput
    update: XOR<horariosUpdateWithoutTurmaInput, horariosUncheckedUpdateWithoutTurmaInput>
    create: XOR<horariosCreateWithoutTurmaInput, horariosUncheckedCreateWithoutTurmaInput>
  }

  export type horariosUpdateWithWhereUniqueWithoutTurmaInput = {
    where: horariosWhereUniqueInput
    data: XOR<horariosUpdateWithoutTurmaInput, horariosUncheckedUpdateWithoutTurmaInput>
  }

  export type horariosUpdateManyWithWhereWithoutTurmaInput = {
    where: horariosScalarWhereInput
    data: XOR<horariosUpdateManyMutationInput, horariosUncheckedUpdateManyWithoutTurmaInput>
  }

  export type horariosScalarWhereInput = {
    AND?: horariosScalarWhereInput | horariosScalarWhereInput[]
    OR?: horariosScalarWhereInput[]
    NOT?: horariosScalarWhereInput | horariosScalarWhereInput[]
    id_horario?: IntFilter<"horarios"> | number
    Data_inicio?: DateTimeNullableFilter<"horarios"> | Date | string | null
    Data_fim?: DateTimeNullableFilter<"horarios"> | Date | string | null
    id_turma?: IntFilter<"horarios"> | number
    Disciplina?: StringFilter<"horarios"> | string
  }

  export type utilizadoresUpsertWithWhereUniqueWithoutTurmasInput = {
    where: utilizadoresWhereUniqueInput
    update: XOR<utilizadoresUpdateWithoutTurmasInput, utilizadoresUncheckedUpdateWithoutTurmasInput>
    create: XOR<utilizadoresCreateWithoutTurmasInput, utilizadoresUncheckedCreateWithoutTurmasInput>
  }

  export type utilizadoresUpdateWithWhereUniqueWithoutTurmasInput = {
    where: utilizadoresWhereUniqueInput
    data: XOR<utilizadoresUpdateWithoutTurmasInput, utilizadoresUncheckedUpdateWithoutTurmasInput>
  }

  export type utilizadoresUpdateManyWithWhereWithoutTurmasInput = {
    where: utilizadoresScalarWhereInput
    data: XOR<utilizadoresUpdateManyMutationInput, utilizadoresUncheckedUpdateManyWithoutTurmasInput>
  }

  export type utilizadoresScalarWhereInput = {
    AND?: utilizadoresScalarWhereInput | utilizadoresScalarWhereInput[]
    OR?: utilizadoresScalarWhereInput[]
    NOT?: utilizadoresScalarWhereInput | utilizadoresScalarWhereInput[]
    id_utilizador?: IntFilter<"utilizadores"> | number
    Nome?: StringNullableFilter<"utilizadores"> | string | null
    Email?: StringNullableFilter<"utilizadores"> | string | null
    Passe?: StringNullableFilter<"utilizadores"> | string | null
    isAdmin?: BoolFilter<"utilizadores"> | boolean
    id_turma?: IntNullableFilter<"utilizadores"> | number | null
  }

  export type turmasCreateWithoutHorariosInput = {
    NomeTurma: string
    Descricao?: string | null
    utilizadores?: utilizadoresCreateNestedManyWithoutTurmasInput
  }

  export type turmasUncheckedCreateWithoutHorariosInput = {
    id_turma?: number
    NomeTurma: string
    Descricao?: string | null
    utilizadores?: utilizadoresUncheckedCreateNestedManyWithoutTurmasInput
  }

  export type turmasCreateOrConnectWithoutHorariosInput = {
    where: turmasWhereUniqueInput
    create: XOR<turmasCreateWithoutHorariosInput, turmasUncheckedCreateWithoutHorariosInput>
  }

  export type turmasUpsertWithoutHorariosInput = {
    update: XOR<turmasUpdateWithoutHorariosInput, turmasUncheckedUpdateWithoutHorariosInput>
    create: XOR<turmasCreateWithoutHorariosInput, turmasUncheckedCreateWithoutHorariosInput>
    where?: turmasWhereInput
  }

  export type turmasUpdateToOneWithWhereWithoutHorariosInput = {
    where?: turmasWhereInput
    data: XOR<turmasUpdateWithoutHorariosInput, turmasUncheckedUpdateWithoutHorariosInput>
  }

  export type turmasUpdateWithoutHorariosInput = {
    NomeTurma?: StringFieldUpdateOperationsInput | string
    Descricao?: NullableStringFieldUpdateOperationsInput | string | null
    utilizadores?: utilizadoresUpdateManyWithoutTurmasNestedInput
  }

  export type turmasUncheckedUpdateWithoutHorariosInput = {
    id_turma?: IntFieldUpdateOperationsInput | number
    NomeTurma?: StringFieldUpdateOperationsInput | string
    Descricao?: NullableStringFieldUpdateOperationsInput | string | null
    utilizadores?: utilizadoresUncheckedUpdateManyWithoutTurmasNestedInput
  }

  export type turmasCreateWithoutUtilizadoresInput = {
    NomeTurma: string
    Descricao?: string | null
    horarios?: horariosCreateNestedManyWithoutTurmaInput
  }

  export type turmasUncheckedCreateWithoutUtilizadoresInput = {
    id_turma?: number
    NomeTurma: string
    Descricao?: string | null
    horarios?: horariosUncheckedCreateNestedManyWithoutTurmaInput
  }

  export type turmasCreateOrConnectWithoutUtilizadoresInput = {
    where: turmasWhereUniqueInput
    create: XOR<turmasCreateWithoutUtilizadoresInput, turmasUncheckedCreateWithoutUtilizadoresInput>
  }

  export type turmasUpsertWithoutUtilizadoresInput = {
    update: XOR<turmasUpdateWithoutUtilizadoresInput, turmasUncheckedUpdateWithoutUtilizadoresInput>
    create: XOR<turmasCreateWithoutUtilizadoresInput, turmasUncheckedCreateWithoutUtilizadoresInput>
    where?: turmasWhereInput
  }

  export type turmasUpdateToOneWithWhereWithoutUtilizadoresInput = {
    where?: turmasWhereInput
    data: XOR<turmasUpdateWithoutUtilizadoresInput, turmasUncheckedUpdateWithoutUtilizadoresInput>
  }

  export type turmasUpdateWithoutUtilizadoresInput = {
    NomeTurma?: StringFieldUpdateOperationsInput | string
    Descricao?: NullableStringFieldUpdateOperationsInput | string | null
    horarios?: horariosUpdateManyWithoutTurmaNestedInput
  }

  export type turmasUncheckedUpdateWithoutUtilizadoresInput = {
    id_turma?: IntFieldUpdateOperationsInput | number
    NomeTurma?: StringFieldUpdateOperationsInput | string
    Descricao?: NullableStringFieldUpdateOperationsInput | string | null
    horarios?: horariosUncheckedUpdateManyWithoutTurmaNestedInput
  }

  export type horariosCreateManyTurmaInput = {
    id_horario?: number
    Data_inicio?: Date | string | null
    Data_fim?: Date | string | null
    Disciplina: string
  }

  export type utilizadoresCreateManyTurmasInput = {
    id_utilizador?: number
    Nome?: string | null
    Email?: string | null
    Passe?: string | null
    isAdmin?: boolean
  }

  export type horariosUpdateWithoutTurmaInput = {
    Data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Data_fim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Disciplina?: StringFieldUpdateOperationsInput | string
  }

  export type horariosUncheckedUpdateWithoutTurmaInput = {
    id_horario?: IntFieldUpdateOperationsInput | number
    Data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Data_fim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Disciplina?: StringFieldUpdateOperationsInput | string
  }

  export type horariosUncheckedUpdateManyWithoutTurmaInput = {
    id_horario?: IntFieldUpdateOperationsInput | number
    Data_inicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Data_fim?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Disciplina?: StringFieldUpdateOperationsInput | string
  }

  export type utilizadoresUpdateWithoutTurmasInput = {
    Nome?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Passe?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type utilizadoresUncheckedUpdateWithoutTurmasInput = {
    id_utilizador?: IntFieldUpdateOperationsInput | number
    Nome?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Passe?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type utilizadoresUncheckedUpdateManyWithoutTurmasInput = {
    id_utilizador?: IntFieldUpdateOperationsInput | number
    Nome?: NullableStringFieldUpdateOperationsInput | string | null
    Email?: NullableStringFieldUpdateOperationsInput | string | null
    Passe?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TurmasCountOutputTypeDefaultArgs instead
     */
    export type TurmasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurmasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use turmasDefaultArgs instead
     */
    export type turmasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = turmasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use horariosDefaultArgs instead
     */
    export type horariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = horariosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use utilizadoresDefaultArgs instead
     */
    export type utilizadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = utilizadoresDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}